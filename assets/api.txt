
初始化应用之前需要调用SB.init()函数，进行必要的初始化，如图片缓存路径等


1、SBQuery：初始化

方式1：
SBQuery q = new SBQuery();
使用时：q.acticity(this).id(R.id.btn_textview).clicked(this);

方式2：
SBQuery q = new SBQuery(Activity, useCache);
——参数2默认为false

方式3：
SBQuery q = new SBQuery(View, useCache);
——参数2默认为false

关于缓存：
——缓存是一个SparseArray，存储了id对应的View，在需要
反复多次find一个View时，应该使用缓存，否则就不应该使用。

getView()会得到内部的当前View对象

2、SBQuery使用：TextView相关操作

q.id(R.id.textview).text(String txt)：设置文本setText
q.id(R.id.textview).text(int resId) :设置资源中的文本
q.id(R.id.textview).text()：返回文本
textTrim()：返回trim之后的文本

q.id(R.id.textview).textColor(int color)：设置文本颜色

3、SBQuery使用：ImageView相关操作

image (int resid)：设置src
image(Drawable drawable)
image(Bitmap bm)
image(File file)

Bitmap getViewbitmap():获取当前View显示的内容，相当于截图

4、背景相关：背景现在好像只适用于TextView及其子控件

background(int id)
background(Drawable draw)

5、使能相关：

clickable(boolean clickable)
enabled(boolean enabled)
focusable(boolean focusable)

6、事件：

点击事件：
clicked(View.OnClickListener listener)
clicked(final Object obj, final String callbackName)
click()：模拟点击

长按事件：
longClicked(View.OnLongClickListener listener)
longClick(final Object obj, final String callbackName)
longClick()：模拟长按

7、可见性：
visibility(int visibility)：参数是View.GONE, VISIBLE, INVISIBLE
visibility() :返回可见性

8、单选，复选等CompoundButton
checked(boolean checked)
checked()

9、ListView和ExpandableListView相关：

itemClicked(OnItemClickListener listener)
adapter(Adapter adapter)：设置adapter
adapter(ExpandableListAdapter adapter)
adapter()：获取adapter，好进行notifyDatasetChanged等操作
selection(int position)
selection() : 返回当前选中项的下标，从0开始，getSelectedItemPosition()



---------------------------对象垃圾箱：SBObjectCache------------------------------
recycle(object)

写个循环，分配很多大对象，用和不用recycle的问题

--------------------------图片显示和下载-------------------------
可配置项：
ImageMgmr.configLocalPath(从服务器现在过来放在哪儿) //这个会附带创建这个目录
 		.configImageNameStrategy(NewName表示我们自己取名;ServerName表示使用服务器的名字)
 		.configImageNameGenerator(new NameGemerator(){
 				public void generateNewName(String oldName){
 					
 				}
 			}) //
		.configImageThreadCount(2)
		.configDownloader(downloader)//配置下载器，因为可能使用不同的http库，默认使用URLConnection

Downloader downloader = new Downlaoder(){
	public void download(url, outpath){
		
	}
}

使用时：
1、可以直接使用ImageMgmr
2、SBQuery里封装了ImageMgmr中显示网络图片的操作，期望宽度和高度是0时，对图片不进行缩放

现在为止，对callback的支持还有待完善，如果显示图片需要显示下载进度，就使用URLConnection的实现吧


------------------------------------ObjectUtil----------------------------
Object、string、byte[]互转工具
ObjectUtil.toString(object)；ObjectUtil.toObject(Base64)；
ObjectUtil.toByteArray(object)；
ObjectUtil.toObject(bytes)；


------------------------------------http------------------------------
版本问题：9以下用HttpClient，现在不用考虑了基本，9以上用URLConnection，但是太原始，这是Volly的选择原则，对应HttpClientStack和HurlStack
取消问题：退出界面时，对应的http请求都取消，没必要进行了，Volly考虑了这个问题，还不知道怎么实现
线程调度问题：原始的是使用AsyncTask内置的线程池，也可以使用自己定义的线程池，控制线程数，Volly具体不知道，但是使用了队列来调度，这个才是Volly的亮点
请求内容多少的问题：Volly适合多个小请求万箭齐发的情况和图片加载，不适用于大文件下载上传，别人都是这么说的

需要服务器配合的接口类型：
1、普通get请求：返回结果，cookie内容，返回header，看看对不对
2、普通get请求：返回结果，cookie内容，返回header，看看对不对
3、文件上传接口：两个文件上传，返回服务器图片url
4、文件下载接口
5、同步请求的问题：如果多个请求需要按顺序进行，必须要提供这种查询的接口，也可能是分页查找，但在一个循环里依次一页一页请求
6、请求的是json数据，但数据量较大的问题，比如能够导致内存OOM的数据量

从对Volly的再封装中发现过度封装没好处，发现此问题的原因是一开始只想对于所有库都对外提供统一接口，
后来就需要面对Volly的RequestQueue最好每个Activity只对应一个，而且要作为Activity的成员以便跟着
Activity的生命周期走
结论：所以决定不对Volly进行傻逼式封装

SBRequest q = new SBRequest();
q.request()
	.flag(String flag)
	.param(name, value)
	.param(name, value)
	.param(name, value)
	.entity(json或xml)
	.method("get") ---------可封装到用户层
	.cache(true)   ---------可封装到用户层
	.cookie(String cookie) ---------可封装到用户层
	.url(String url) ---------可封装到用户层
	.callback(this)  
	.repeat(true)  ---------可封装到用户层
	.header(name, value)   ---------可封装到用户层
	.go();

public interface NetAccessListener {
		public void onAccessComplete(boolean success, String object,
				VolleyError error, String flag){
			
			if(!success){
				error是根据404,500等状态码转换的文本
				return;
			}
			
			if(flag.equals("add")){
			
				//flag区分不同的请求
				
			}
				
		}
	}	

	
-----------------------------------------md5----------------------------
SBMD5
	
	
----------------------------------------Bitmap工具----------------------
1、图片分割

list = ImageSplitter.split(bitmap, xcount, ycount);
参数是x和y方向的各切成几块

2/

------------------------------文件上传下载-------------------------
FileDownloadThread
FileUpload
当前用法：
-----
FileDownloadThread  t = new FileDownloadThread("url", file, startPosition, handler);
t.start();
t.setSuspend(true);//暂停下载
t.setSuspend(false);//取消暂停
-----
HashMap<String, String> params = new HashMap<String, String>();
params.put("page", "1");
params.put("name", "2");

HashMap<String, File> files = new HashMap<String, File>();
files.put("1.apk","/mnt/sdcard/1.apk"));
files.put("name", new File(Environment.getExternalStorageDirectory().getAbsolutePath(),"6.jpg"));
                                
new fileupload("http://192.168.191.1:8081/uploadtest/servlet/upload2",params, files,MainActivity.this).execute("");
-----

期待用法：
上传：
FileUploader u = new FileUpdloader(context);
u.params(Map<String,String)
 .files(Map<String, File))
 .url(String)
 .callback(new FileUploadCallback())
 .go();

FileUploadCallback:
onStart(String name, File f);
onUploading(String name, File f, progress, total);
onFinish(String name, File f);
onError(String name, File f, String errorInfo);
---name是文件的key，表示哪个文件

下载：
FileDownloader d = new FileDownloader(context);
d.params(Map<String,String)
 .url()
 .callback(new FileDownloadCallback())
 .go();//如果此文件之前已经下载了一部分，则继续（取出保存的进度）

d.pause(); //记录进度
d.resume();//和go一样，就是go

FileDownloadCallback：
onStart();
onLoading(progress, total);
onError(String err);
onFinish();//成功
 
---------------------------------通用adapter---------------------------
对于普通ListView，GridView带type的ListView（每个item对应的需要相同类型的bean）
SBSimpleAdapter，内部已经封装了convertView重用防new优化，和ViewHolder缓存防查找优化

class TestAdapter extends SBSimpleAdapter<Bean>{

	public TestAdapter(Context context, List<Bean> list, int layoutId) {
		super(context, list, layoutId);
	}

	@Override
	public boolean isConvertViewUseable(View convertView) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public void fillHolder(com.sb.framework.view.SBSimpleAdapter.ViewHolder holder,
			View convertView, Bean bean, int position) {
		TextView text1 = (TextView) holder.findViewByID(android.R.id.text1, convertView);
		text1.setText(bean.name);
	}
	
}

----------------------------DB---------------------
1、Bean里字段的定义问题：注解， 表的初始化问题
2、create：Bean转换为sql语句问题，获得刚添加的记录的id问题
3、update：同上
4、delete：同上
5、查询：
（1）sql语句构造问题
（2）cursor各个字段的值转换为bean属性值的问题
（3）缓存：查询结果的缓存和获取：以sql为key，以及缓存的失效问题
6、事务问题：使用trasaction或者使用对象锁

最后，最重要的，对外api要优雅，要有格调

创建和更新：createOrUpdate(Bean) 需要配合检查Bean.isValidId(bean.id)，不是合法的id，则需要创建，否则update
更新：update(Bean)，update(Bean, "name,age")，参数2指定需要update的字段，省的每次都是全部字段的update
删除：delete(Bean), delete(id)
以上都需要对应事务，都需要提供批量的接口

查询：简单版
queryById(Bean.class, Object id);
queryByEqual(Bean.class, "列表", "值")
query(Bean.class, "name, age", "where orderBy having group", -1, -1)
参数1：决定了表名
参数2：决定了选择的字段，如果不为空， 则返回Map<String, Object>，否则返回bean，这个意思很明了吧
现在有了select x,d from tableName
参数3：后面的条件，分组，排序等
参数4和5表示offset和limit：以参数指定的行开始，取参数5指定的条数，要取第一行， 则0,1，表示从0开始取1行
对于分页，offset就是(pageNow - 1) * pageSize，limit就是pageSize

查询：多表：
Map<String, Object> map = query(String sql);
	
	
---------------------------GreenDao------------------
最近在对开发项目的性能进行优化。由于项目里涉及了大量的缓存处理和数据库运用，需要对数据库进行频繁的读写、查询等操作。因此首先想到了对整个项目的数据库框架进行优化。
   原先使用android本身内置的sqllite，也就是用的最基本的SQLiteOpenHelper方法，这种方法对自己来说比较方便易懂。但是在使用过程中感觉很繁琐，从建表到对表的增删改查等操作，如果表对象的属性很多，就需要使用大量的代码来执行建表、插入等。在代码执行中还需要对数据库和游标的进行及时关闭(开启使用，用完关闭)，而且还需要部分sql语言，这在开发中产生bug进行调试时尤其不方便。
     目前android经常用的orm框架主要有greenDAO、OrmLite、AndrORM。 综合了网上的各种评价，greenDAO的运行效率最高，内存消耗最少，性能最佳。因此决定采用greenDAO框架，对项目的orm框架进行改进。
	
http://blog.csdn.net/krislight/article/details/9391455	

--------------------------SB常用工具集合--------------------------
1、需要初始化

2、非空判断：
SB.common.isEmpty(Object)

toString(Object obj)
getTimeStamp()：时间戳，可做暂时的唯一标识
count(Collection<?> c)：获取集合size
count(T[] arr)
Activity启动操作

3、date：日期操作

toString(Date date, String format)
toDate(String date, String format)
	
	